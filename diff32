#!/bin/sh

########################### diff32 bash paging wrapper ##########################
# Implements process/pipe/signal handling for use of a default pager with the
# diff32 gawk script. gawk doesn't offer any signal handling, thus this wrapper.
#
# We want ^C (SIGINT) to interrupt any in-progress/runaway computation but also
# cleanly exit a pager.  The pager must exit first, else the terminal gets
# clobbered by out-of-order cleanup.
#
# The wrapper also makes sure ^C really shuts down everything. If gawk gets hung
# in a loop or due to a bug, it won't notice that stdout/stderr simply went away.
# After the pager exits, the interrupt handler issues a kill 0.

exec {script_fd}<<'#EOF'

#################### bash script continues after gawk section ###################
######################### diff32 gawk script begins here ########################
#!/usr/bin/awk -E   # Unnecessary, seems clearer to include it.

# Program data output
function out(string,
             ret){
    if (pager) {
        printf string | LESS
    } else {
        printf string
    }
}

# Error/console output
function err(string){
    if (use_stdout) {
        out(string)
    } else {
        print string > out_dev
    }
}

# Redirect where console messages are going.
function err_redirect(dev){
    out_dev = dev
}

# Change ANSI escape color; tracks current color so that
# repeated settings to the same color aren't output.
function change_color(color){
    if (current_color != color) out(color)
    current_color = color
}

# helper function to print the input, optionally colorizing the
# nibbles that match the comparison input to_compare using the escape
# sequence 'off', and the nibbles that do not match with 'on'.  'lock'
# is nonzero if a color change to 'on' should persist for the rest of
# the string regardless of match; this is used to highlight address
# differences.
function out_highlight(to_print, to_compare, off_color, on_color, lock,
                       current, a, b, i){
    change_color(off_color)
    for(i=1; i<=length(to_print); i++){
        a = substr(to_print,i,1)
        b = substr(to_compare,i,1)
        if (a != b){
            change_color(on_color)
        } else {
            if (!lock) change_color(off_color)
        }
        out(a)
    }
    change_color(off_color)
}

function map_an_address(addr,
                        i){
    for (i=0; i<address_maps; i++) {
        if (address_map_src[i] <= addr) {
            addr = address_map_dst[i] + addr - address_map_src[i]
            break
        }
    }
    return addr
}

# print an address header at the beginning of a new block of differences.
function print_address(old, new,
                       old_str, new_str, old_map, new_map, bar, base, diff){

    # mapping is purely a cosmetic addition, so it's handled on-demand here
    old_map = map_an_address(old)
    new_map = map_an_address(new)
    old_str = sprintf("0x%08x",old)
    new_str = sprintf("0x%08x",new)

    bar = " "
    if (old == old_map && new == new_map){
        if(!color) bar = "_"
        base = color_address_base
        diff = color_address_diff
    } else {
        base = color_unchanged
        diff = color_unchanged
    }
    out(bar)
    change_color(base)
    out_highlight(old_str,new_str,base,diff,1);
    out(bar""bar""bar""bar""bar""bar""bar)
    out_highlight(new_str,old_str,base,diff,1);
    change_color(color_off)
    out(bar"\n")

    if (old != old_map || new != new_map){
        old_str = sprintf("0x%08x",old_map)
        new_str = sprintf("0x%08x",new_map)
        base = color_address_base
        diff = color_address_diff
        if(!color) bar = "_"

        out("[")
        change_color(base)
        out_highlight(old_str,new_str,base,diff,1);
        out(bar""bar"MAP"bar""bar)
        out_highlight(new_str,old_str,base,diff,1);
        change_color(color_off)
        out("]\n")
    }
}

# print one line of a diff block
function print_words(old_word, new_word,
                    c, ccolor) {
    if(old_word == new_word){
        change_color(color_unchanged)
        out(sprintf(" %s  %s  %s\n", old_word, " ", new_word))
        change_color(color_off)
        old_cursor++
        new_cursor++
    } else {
        c = "!"
        ccolor = color_bytes_unchanged
        if (old_word == "") {
            c = ">"
            old_word = "           "
            ccolor = color_bytes_new
        } else {
            old_cursor++
        }
        if (new_word == ""){
            c = "<"
            new_word = "           "
            ccolor = color_bytes_old
        } else {
            new_cursor++
        }
        out(" ")
        out_highlight(old_word,new_word,color_off,color_bytes_old,0)
        change_color(ccolor)
        out(sprintf("  %s  ", c))
        change_color(color_off)
        out_highlight(new_word,old_word,color_off,color_bytes_new,0);
        out("\n")
    }
}

function print_end(){
    out("\n ----------- END ----------- \n")
}

function format_word(line){
    if(line == ""){
        return line
    } else {
        return sprintf("%2s %2s %2s %2s",
                       substr(line,2,2),
                       substr(line,4,2),
                       substr(line,6,2),
                       substr(line,8,2))
    }
}

function flush_consolidation(){


}

function consolidate_words(old_word, new_word){
    print_words(old_word, new_word)

}

# Toplevel for line-by-line output handling; manages context, address
# output and line formatting
function submit_line(old_line, new_line,
                     i, old_word, new_word){
    old_word = format_word(old_line)
    new_word = format_word(new_line)
    if(old_word == new_word){
        # context and identical lines are not consolidated or redacted,
        # but we may need to flush existing consolidation
        flush_consolidation()
        # push the line into context or print it?
        if(context_count<0){
            # running out post-context, so print
            print_words(old_word,old_word)
            context_count++
        } else {
            # already passed [context] identical lines, push to context queue
            for(i=context_count;i>0;i--) {
                context_word[i]=context_word[i-1]
            }
            context_word[0] = old_word
            if( context_count < context) {
                context_count++
            }else{
                # a line got pushed out of the context, update the
                # print address cursors
                old_cursor++
                new_cursor++
            }
        }
    } else {
        # Do we need to print an address header?
        if (context_count >= context || near_beginning) {
            # Yes. post-context has run out, or we're at/near
            # beginning of file.  Skip a line for visual break and
            # print an address header.
            if (!near_beginning) out("\n")
            print_address(old_cursor*4, new_cursor*4)
            near_beginning=0
        }
        # Print any pending pre-context
        for(i=context_count;i>0;i--) {
            print_words(context_word[i-1],context_word[i-1])
        }
        # Mark need for trailing context before starting a new address block
        context_count= -context
        # Consolidate words, flush/print when needed
        consolidate_words(old_word, new_word)
    }
}

# simple abs() function as there's no relaibly available built-in
function abs(v){
    if(v<0)v= -v
    return v
}

function push_old(line){
    old_line[old_count++]=line
    old_advance--
}

function push_new(line){
    new_line[new_count++]=line
    new_advance--
}

function remove_old(num,
                      j){
    # More concerned about being correct than
    # efficient right now, so doing it the simple way and just
    # shifting the line buffers.
    old_count -= num
    for(j=0; j<old_count; j++) old_line[j]=old_line[j+num]
}

function remove_new(num,
                      j){
    # More concerned about being correct than
    # efficient right now, so doing it the simple way and just
    # shifting the line buffers.
    new_count -= num
    for(j=0; j<new_count; j++) new_line[j]=new_line[j+num]
}

function remove_lines(num,
                      j){
    remove_old(num)
    remove_new(num)
}


function output_split(old_end, new_end,
                     i, j, old_pos, new_pos){
    # search exact word match up from bottom
    old_pos=old_end
    new_pos=new_end
    while(old_pos>0 && new_pos>0){
        if(substr(old_line[old_pos-1],2,8)!=            \
           substr(new_line[new_pos-1],2,8))break;
        old_pos--
        new_pos--
    }

    for(i=0; i<old_pos && i<new_pos; i++)
        submit_line(old_line[i], new_line[i])
    for(j=i; j<old_pos; j++)
        submit_line(old_line[j],"")
    for(j=i; j<new_pos; j++)
        submit_line("",new_line[j])

    # now push the exact bottom matches
    while(old_pos<old_end && new_pos<new_end){
        submit_line(old_line[old_pos], new_line[new_pos])
        old_pos++
        new_pos++
    }
    # done
    remove_old(old_end)
    remove_new(new_end)
}

function match_forward(old_end, new_end,
                       i){
    # Excluding words from the initial exact natching through diff
    # will result in diff sections that begin with or consist
    # entirely of lines that actually do match.  Start by
    # submitting these exact matches (which will handle any
    # outputting needed).  Similarly, the recursive parsing breaks
    # up regions by exact match, and those exact matches will need
    # to be pushed here as well.
    for(i=0; i<old_end && i<new_end; i++){
        if(substr(old_line[i],2,8) != substr(new_line[i],2,8))break
        submit_line(old_line[i],new_line[i])
    }

    # Submitted lines need to be removed from the old and
    # new line lists.
    if (i>0) remove_lines(i)
    return i
}

function match_search(old_end, new_end, pos_return,
                      i, j){
    # search by increasing offset
    for (j=0; j<old_end || j<new_end; j++) {
        # common overlap loop
        for(i=0; i<new_end-j && i<old_end-j; i++){
            if(old_line[i] == new_line[i+j]) {
                pos_return["old"] = i
                pos_return["new"] = i+j
                pos_return["off"] = -j
                return
            }
            if(old_line[i+j] == new_line[i]) {
                pos_return["old"] = i+j
                pos_return["new"] = i
                pos_return["off"] = j
                return
            }
        }
        # more negative offset to search?
        while(i<new_end-j && i<old_end){
            if(old_line[i] == new_line[i+j]){
                pos_return["old"] = i
                pos_return["new"] = i+j
                pos_return["off"] = -j
                return
            }
            i++
        }
        # more positive offset to search?
        while(i<old_end-j && i<new_end){
            if(old_line[i+j] == new_line[i]){
                pos_return["old"] = i+j
                pos_return["new"] = i
                pos_return["off"] = j
                return
            }
            i++
        }
    }
    pos_return["old"] = old_end
    pos_return["new"] = new_end
    pos_return["off"] = old_end - new_end
}

function trim_for_subsearch(old_end, new_end, len,
                                   i){
    for(i=0; i<old_end; i++) old_line[i] = substr(old_line[i],1,len)
    for(i=0; i<new_end; i++) new_line[i] = substr(new_line[i],1,len)
}

function set_exclusions(old_end,
                        i){
    for(i=0; i<old_end; i++)
        old_line[i]=gensub(/(w)(00000000|ffffffff)/,"x\\2","g",old_line[i])
}


function clear_exclusions(old_end,
                          i){
    for(i=0; i<old_end; i++) gsub(/x/,"w",old_line[i])
}

function weak_split(old_end, new_end, threshold,
                    i, j, pos){
    if(threshold < match_words_min){
        clear_exclusions(old_end)
        output_split(old_end, new_end)
    }else{
        # Rather than complicating match with substr, perform it up front.
        trim_for_subsearch(old_end, new_end, threshold*9)

        while (new_end>0 || old_end>0) {
            i = match_forward(old_end, new_end)
            # update our own local subset end count
            old_end -= i
            new_end -= i
            # Do nothing further if that was the whole section.
            if(old_end==0 && new_end==0) break;

            # Look forward for exact matches; we split diff parsing at
            # that point.
            match_search(old_end, new_end, pos)

            # recurse, match or no.
            weak_split(pos["old"], pos["new"], threshold-1)

            # The weak_split call will always consume the entire region
            # passed to it.
            old_end -= pos["old"]
            new_end -= pos["new"]
        }
    }
}

# Successively break up initial region by exact matches searched by
# increasing offset.
function strong_split(old_end, new_end,
                      i, j, pos){
    while (new_end>0 || old_end>0) {
        i = match_forward(old_end, new_end)
        # update our own local subset end count
        old_end -= i
        new_end -= i
        # Do nothing further if that was the whole section.
        if(old_end==0 && new_end==0) break

        # Look forward for exact matches; we split diff parsing at
        # that point.
        match_search(old_end, new_end, pos)

        # If no exact matches, our region is not bookmarked by
        # initial matches, and so we don't have enough information
        # to make a good submatch.  Return.
        if(pos["old"] == old_end) break

        # if no currently active match horizon point, set it
        if(!advance_active){
            advance_active = 1
            old_advance = horizon
            new_advance = horizon
        }
        if(old_advance>0 || new_advance>0) return
        old_advance = 0
        new_advance = 0
        advance_active = 0

        # Check the buffered horizon against the offset.  We want
        # sufficient lookahead to make strong, low-offset matches
        # before doing lots of subdivision.  Thus we want to avoid
        # making immediate high-offset matches that would prevent
        # better low-offset matches in the future.

        # Heuristic is to make sure that there's sufficient buffer
        # that the matching positions from above would still land in
        # the existing the buffer if the offset sign is flipped.

        if(!diff_eof){
            new_advance = pos["old"] + horizon - new_end + pos["off"]*2
            old_advance = pos["new"] + horizon - old_end - pos["off"]*2
            if(new_advance > 0 || old_advance > 0){
                advance_active = 1
                return
            }
        }

        # Recurse to subdivide
        set_exclusions(old_end)
        weak_split(pos["old"], pos["new"], match_words_max-1)

        # Upon returning, we've parsed, output, and removed the
        # regions that previously stretched from [0 .. old_pos)
        # and [0 .. newpos). Update our own subset and iterate.
        old_end -= pos["old"]
        new_end -= pos["new"]
    }
}

function stdout_usage(){
    err_redirect("/dev/stdout")
    usage()
    err_redirect("/dev/stderr")
}

function usage(){
    err("")
    err("diff32 : A 'diff'-style comparison tool for raw 32 bit binaries")
    err("")
    err("USAGE  : diff32 [OPTIONS] fileA.bin fileB.bin")
    err("")
    err("OPTIONS:")
    err("")
    err("  -c, --context=NUM")
    err("")
    err("     Include NUM lines of copied context before and after changes.")
    err("     Minimum value is 0, maximum is 16.  Default is 3.")
    err("")
    err("  -d, --minimal")
    err("")
    err("     Try hard to find a smaller set of changes.")
    err("")
    err("  -e, --embargo-deletion")
    err("")
    err("     Emit deletions as placeholders indicating the number of words")
    err("     omitted from fileA. Emit line changes (ie, ! lines) with words")
    err("     from fileA obscured. Context is set to zero, but may be over-")
    err("     ridden by following with -c LINES.  Embargo is intended to")
    err("     minimize the amount of fileA included in output.")
    err("")
    err("  -h, --help")
    err("")
    err("     Output this help message and exit.")
    err("")
    err("  -l, --minimum-match-length=NUM")
    err("")
    err("     Sets the minimum length in words of a match when performing")
    err("     subdivision of large regions.  NUM may be 1 through 32 (default")
    err("     is 2 lines/words) and must be less than or equal to the initial")
    err("     match length.")
    err("")
    err("  -L, --initial-match-length=NUM")
    err("")
    err("     Sets the required match length in words when doing initial")
    err("     matching of large regions. NUM may be 1 through 32 (default")
    err("     is 8 lines/words) and must be greater than or equal to the")
    err("     minimum match length.")
    err("")
    err("  -m, --map=DESTINATION[,SOURCE[,LENGTH]]")
    err("")
    err("     Map displayed input byte range of LENGTH bytes starting at")
    err("     SOURCE byte offset to the range beginning at DESTINATION.  -m")
    err("     only affects displayed addresses, not match or output order.")
    err("     Omitting LENGTH extends range to the end of the file.  Omitting")
    err("     both SOURCE and LENGTH maps the entire input. More than one")
    err("     range may be specified. Later overlapping input ranges override")
    err("     earlier ranges. Final destination ranges may not overlap. Values")
    err("     may be decimal, octal (leading 0) or hexadecimal (leading 0x).")
    err("")
    err("  -n, --no-pager")
    err("")
    err("  -p, --pager")
    err("")
    err("  -s, --swap-endian")
    err("")
    err("     diff32 normally presents bytes in as-read order. -s instructs")
    err("     diff32 to swap the order it prints bytes on each line. -s has")
    err("     no effect on matching as matching is endian-agnostic.")
    err("")
    err("  -v, --version")
    err("")
    err("     Output version and exit.")
    err("")
    err("  -z, --extend-horizon=NUM")
    err("")
    err("     Add NUM additional words to the computed lookahead horizon when")
    err("     searching for initial matches with the lowest possible offsets.")
    err("     NUM may be between zero (disabling lookahead) and 4096. Higher")
    err("     values may produce better output at the cost of greatly increased")
    err("     computation time.  The default value is 32.")
    err("")
    err("  --color")
    err("")
    err("     Colorize the output.")
    err("")
    err("  --no-color")
    err("")
    err("     Do not colorize the output.")
    err("")
    err("DETAILS:")
    err("")
    err("     diff32 is an awk script that wraps the standard diff utility")
    err("     to produce a human-readable side-by-side text summary of")
    err("     differences between two raw 32-bit binary files. diff32 ")
    err("     searches for changes, insertions, and deletions.")
    err("")
    err("EXAMPLE:")
    err("")
    err("  diff32 -d --color mips_binary1.bin mips_binary2.bin | less -R")
    err("")
    err("     Produce a colorized summary of the differences in binary files")
    err("     mips_binary1.bin and mips_binary2.bin, presented on the terminal")
    err("     one page at a time using the 'less' utility. The -d option to")
    err("     diff32 requests extra time be spent to minimize the change")
    err("     set. The -R option instructs less to allow ANSI color codes.")
    err("")
    err("AUTHOR:")
    err("")
    err("     Written by Monty Montgomery <monty@xiph.org>")
    err("     This is free software: you are free to change and redistribute")
    err("     it.  There is NO WARRANTY, to the extent permitted by law.")
    err("")
    err("SEE ALSO:")
    err("")
    err("  diff(1), cmp(1), xdelta(1), awk(1)")
    err("")
}

function list_map_error(i, j,
                        k, str){
    err("       Requested mapping ranges:")
    for(k=0; k < address_maps; k++) {
        if (k+1 < address_maps) {
            str = sprintf("       %d) src: [0x%08x..0x%08x) -> "        \
                          "dst [0x%08x..0x%08x)",k,
                          address_map_src[k],
                          address_map_src[k+1],
                          address_map_dst[k],
                          address_map_dst[k] +                          \
                          address_map_src[k+1] - address_map_src[k])
        } else {
            str = sprintf("       %d) src: [0x%08x..   EOF    ] -> "    \
                          "dst [0x%08x..   EOF    ]",k,
                          address_map_src[k],
                          address_map_dst[k])
        }
        if (k==i || k==j) {
            str=str" <<<"
        }
        err(str)
    }
    err("")
}

function sanity_check_maps(                                             \
                           i, j, k, lenA, startA, endA, len, start, end){
    for (i=0; i < address_maps-1; i++) {
        lenA = address_map_src[i+1] - address_map_src[i]
        startA = address_map_dst[i]
        endA   = address_map_dst[i] + lenA
        for (j=i+1; j < address_maps; j++) {
            if (j+1 < address_maps) {
                len = address_map_src[j+1] - address_map_src[j]
                start = address_map_dst[j]
                end   = address_map_dst[j] + len
                if (start < startA) start = startA
                if (end > endA) end = endA
                if (start < end) {
                    err(sprintf("ERROR: Mapped destination address"     \
                                " conflict from 0x%08x to 0x%08x",
                                start, end))
                    list_map_error(i,j)
                    exit(1)
                }
            } else {
                start = address_map_dst[j]
                end = start + 1
                if (start < startA) start = startA
                if (end > endA) end = endA
                if (start < end) {
                    err(sprintf("ERROR: Mapped destination address"     \
                                " conflict beginning at 0x%08x",
                                start))
                    list_map_error(i,j)
                    exit(1)
                }
                if (start < endA) {
                    err("ERROR: Possible destination address"           \
                        " conflict depending on length of input.")
                    err(sprintf("       Final mapping destination may"  \
                                " extend into mapping %d.",i))
                    list_map_error(i,j)
                    exit(1)
                }
            }
        }
    }
}

# Internally, address mapping regions are simple src/dest
# pairs. Regions are ordered and each region stretches to the
# next so that there are no holes.
function add_map(dst, src, len,
                 i, j, k, src_prev, dst_prev){
    if (address_maps == 0) {
        address_map_src[0] = 0
        address_map_dst[0] = 0
        address_maps = 1;
    }
    dst = strtonum(dst)
    src = strtonum(src)
    # find insertion point for start of map
    for(i=0; i < address_maps; i++) {
        if(address_map_src[i] >= src) break
    }
    if(len == ""){
        # unbounded address map; add one entry from
        # src/dest to end of file, replacing any later entries
        address_map_src[i] = src
        address_map_dst[i] = dst
        address_maps = i+1;
    } else {
        len = strtonum(len)
        # bounded address map; add two entries, one that enters the
        # map and one that exits it, potentially to some previously
        # specified map that is only being partially replaced.

        # find where this map ends.  loop below saves mapping entry
        # we're cutting/replacing.
        src_prev = 0
        dst_prev = 0
        for(j=i; j < address_maps; j++) {
            if(address_map_src[j] > src+len) break
            src_prev = address_map_src[j];
            dst_prev = address_map_dst[j];
        }
        # we'll insert two entries and delete i through j exclusive;
        # expand/contract list past i as needed
        if(2 > j-i) {
            # expand
            for(k=address_maps-1; k>=i; k--){
                address_map_src[k+2-j+i] = address_map_src[k];
                address_map_dst[k+2-j+i] = address_map_dst[k];
            }
        } else if (2 < j-i) {
            #contract
            for(k=i+2; k<address_maps; k++){
                address_map_src[k] = address_map_src[k+j-i-2];
                address_map_dst[k] = address_map_dst[k+j-i-2];
            }
        }
        address_maps += 2-j+i
        address_map_src[i+1] = src + len
        address_map_dst[i+1] = (src + len - src_prev) + dst_prev
        address_map_src[i] = src
        address_map_dst[i] = dst
    }
}

function version () {
    out("\n")
    out("diff32 version 0.0.3\n")
    if ("/usr/bin/awk --version" | getline) {
        out($0"\n")
    }
    if (DIFF" --version" | getline) {
        out($0"\n")
    }
    if (LESS" --version" | getline) {
        out($0"\n")
    }
    out("\n")
}

function opterr(msg){
    err("\n")
    err("diff32: "msg"\n")
    err("        See man page or diff32 --help for more information.\n")
    err("\n")
    close("/dev/stdout")
    exit(1)
}

function getopts(argc, argv,
                 i, j, options_done, options, argument, pos){
    options_done = 0;
    for(i=1; i<argc; i++){
        option = ""
        delete argument
        if (!options_done){
            if (argv[i] == "--") {
                options_done = 1
            } else {
                if (substr(argv[i],1,2) == "--"){
                    pos = index(argv[i],"=")
                    if (pos>0) {
                        option = substr(argv[i],3,pos-3)
                        split(substr(argv[i],pos+1),argument,",")
                    } else {
                        option = substr(argv[i],3)
                    }
                } else if (substr(argv[i],1,1) == "-"){
                    if(length(argv[i])>2){
                        opterr("Error parsing command line argument.")
                    }
                    option = substr(argv[i],2)
                    split(argv[i+1],argument,",")
                } else {
                    if (fileA == "") {
                        fileA = argv[i]
                        continue
                    } else if (fileB =="") {
                        fileB = argv[i]
                        continue
                    } else {
                        opterr("Too many files specified on command line.")
                    }
                }
                if (option == "c" || option=="l" || option=="L" || option== "m" ||
                    option == "z"){
                    i++ # advance past argument
                }
                if (option == "c" || option == "context"){
                    if (argument[1] == "" || argument[2] != "") {
                        opterr("Context takes a single argument.")
                    }
                    context = strtonum(argument[1]);
                    if(context < 0 || context > 16){
                        opterr("Context argument must be in the range 0..16.")
                    }
                } else if (option == "d" || option == "minimal") {
                    minimal = "-d "
                } else if (option == "e" || option == "embargo-deletion") {
                    embargo = 1
                    context = 0
                } else if (option == "l" || option == "minimum-match-length") {
                    if (argument[1] == "" || argument[2] != "") {
                        opterr("Minimum match length takes a single argument.")
                    }
                    match_words_min = strtonum(argument[1]);
                    if(match_words_min < 1 || match_words_min>32){
                        opterr("Minimum match length must be in the range 1..32.")
                    }
                } else if (option == "L" || option == "initial-match-length") {
                    if (argument[1] == "" || argument[2] != "") {
                        opterr("Initial match length takes a single argument.")
                    }
                    match_words_max = strtonum(argument[1]);
                    if(match_words_max < 1 || match_words_max>32){
                        opterr("Initial match length must be in the range 1..32.")
                    }
                } else if (option == "h" || option == "help") {
                    stdout_usage()
                    exit(0)
                } else if (option == "m" || option == "map") {
                    if (argument[1] == "" || argument[4] != "") {
                        opterr("Map option takes one to three comma-separated arguments.")
                    }
                    add_map(argument[1],argument[2],argument[3])
                } else if (option == "n" || option == "no-pager") {
                    pager = 0
                } else if (option == "p" || option == "pager") {
                    pager = 1
                } else if (option == "s" || option == "swap-endian") {
                    swap = 1
                } else if (option == "v" || option == "version") {
                    version()
                    exit(0)
                } else if (option == "z" || option == "extend-horizon"){
                    if (argument[1] == "" || argument[2] != "") {
                        opterr("Horizon option takes a single argument.")
                    }
                    horizon = strtonum(argument[1]);
                    if(horizon < 0 || horizon > 4096){
                        opterr("Horizon argument must be in the range 0..4096.")
                    }
                } else if (option == "color") {
                    color = 1
                } else {
                    opterr("Unknown arguemnt on command line.")
                }
            }
        } else {
            if (fileA == "") {
                fileA = argv[i]
            } else if (fileB =="") {
                fileB = argv[i]
            } else {
                opterr("Too many files specified on command line.")
            }
        }
    }

    if(fileA == "" || fileB == ""){
        opterr("Missing input file(s).")
    }

    if(match_words_min>match_words_max){
        opterr("Minimum match length must be less than or equal to initial match length.")
    }
    sanity_check_maps()
}

function output_maps(\
                     k){
    for(k=0; k < address_maps; k++) {
        err(sprintf("MAP: 0x%08x -> 0x%08x\n",
                    address_map_src[k],
                    address_map_dst[k]))
    }
    if(address_maps) out("\n")
}

function is_stdout_a_tty() {
    return system("[[ ! -t 1 ]]")
}

function find_util(path, envvar,
                   cmd){
    if(ENVIRON[envvar])path = ENVIRON[envvar]
    cmd = "which "path
    cmd|getline
    close(cmd)
    if(!$0) err("diff32: Can't find '"path"' utility in the path.")
    return $0
}

BEGIN {
    # arguments
    context = 3
    color = -1
    minimal = ""
    swap = 0
    embargo = 0
    match_words_min = 2
    match_words_max = 8
    horizon = 32
    pager = 0

    # global state variables
    old_cursor=0
    new_cursor=0
    old_count=0
    new_count=0
    old_advance=0
    new_advance=0
    advance_active=0
    diff_eof=0
    context_count=0
    near_beginning=1
    address_maps=0
    out_dev="/dev/stderr"

#    if(is_stdout_a_tty()){
#        pager = 1
#    }
    getopts(ARGC, ARGV)
    if(color == -1) {
        color = pager
    }

    DIFF = find_util("diff","DIFFPROG")
    if(pager){
        LESS = find_util("less","PAGER")" -R -F -M"
        PROCINFO["NONFATAL"]=1
    }
    if (color) {
        color_address_base = "\033[0;4m"
        color_address_diff = "\033[0;1;4m"
        color_unchanged = "\033[0;2m"
        color_bytes_old = "\033[0;31;1m"
        color_bytes_new = "\033[0;32;1m"
        color_bytes_changed = "\033[0;1m"
        color_off = "\033[0m"
    } else {
        color_address_base = ""
        color_address_diff = ""
        color_unchanged=""
        color_bytes_old=""
        color_bytes_new=""
        color_bytes_changed=""
        color_off=""
    }
    # Convert binary input to undecorated hexadecimal ASCII.
    # This outputs a line per word, however each line consists of the
    # current word and the previous match_words_max-1 words as well.
    # This way we match on multiple words but with granularity.
    textify_cmd="LC_ALL=C /usr/bin/awk '                                \
        BEGIN {\n                                                       \
            BINMODE = 3\n                                               \
            RS = \"[\\0-\\xff]{4}\"\n                                   \
            for(i=0;i<256;i++){\n                                       \
                f=sprintf(\"%c\",i)\n                                   \
                t=sprintf(\"%02x\",i)\n                                 \
                tohex[f]=t\n                                            \
            }\n                                                         \
        }\n                                                             \
        {\n                                                             \
            word = \"\"tohex[substr(RT,1,1)]\n                          \
            for(i=2;i<=8;i++) word = word\"\"tohex[substr(RT,i,1)]\n    \
            line = \"w\"word\"\"substr(line,1,"match_words_max"*9-9)\n  \
            print line\n                                                \
        }'"
    diff_cmd="diff "                                                    \
        "--old-line-format=$'< %l\n' "                                  \
        "--new-line-format=$'> %l\n' "                                  \
        "--unchanged-line-format=$'= %l\n' "                            \
        "-- "                                                           \
        "<("textify_cmd" \""fileA"\") "                                 \
        "<("textify_cmd" \""fileB"\") "
    output_maps()
    out("")
    while(!ERRNO && (diff_cmd | getline) > 0){
        line = $2
        if ($1=="="){
            push_old(line)
            push_new(line)
            strong_split(old_count, new_count)
        } else if ($1=="<") {
            push_old(line)
        } else if ($1==">") {
            push_new(line)
        }
    }
    diff_eof = 1
    # flush each stage of the diff handling pipeline
    strong_split(old_count, new_count)
    output_split(old_count, new_count)
    flush_consolidation()
    print_end()
    close("/dev/stdout")
}

############################ diff32 gawk script ends ############################
#EOF
############################ back to the bash wrapper ###########################

_interrupt() {
  # Immediate kill 0 won't do what we want; it kills us too.
  # The pager must fully exit first.
  kill -INT $pager_pid
  wait $pager_pid
  # now kill 0 will do what we want
  kill -TERM 0
}

# test for interactive terminal
[[ ! -t 1 ]]
use_pager=$?

# allow user to override default
# scan arguments without clobbering them
args=( "$@" )
while test $# -gt 0
do
    case "$1" in
        -p|--pager)
          use_pager=1
            ;;
        -n|--no-pager)
          use_pager=0
            ;;
    esac
    shift
done

if [ $use_pager == 1 ]; then
  ####################### pager case ############################
  # exec script, get output fd and pid.
  exec {diff32_fd}< <(awk -f - -- "${args[@]}" <&$script_fd) ; script_pid=$!
  # Trap interrupts before starting pager.
  trap _interrupt INT
  # Connect pager to script, get pager fd.
  less -R -K -M -X <&$diff32_fd & pager_pid=$!
  # Gate on the pager.
  wait $pager_pid
  # Allow an emergency ^C to bail from cleanup gone wrong.
  pager_pid=0
  # Wait, but allow hard ^C if needed.
  wait
else
  ##################### non-pager case ##########################
  # run script.
  awk -f - -- "${args[@]}" <&$script_fd
fi
